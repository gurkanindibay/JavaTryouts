input {
  # Beats input for log files
  beats {
    port => 5044
  }

  # Direct log input via TCP/UDP
  tcp {
    port => 5000
    codec => json
  }

  udp {
    port => 5000
    codec => json
  }

  # HTTP input for application logs
  http {
    port => 8080
    codec => json
  }
}

filter {
  # Add a default service name
  mutate {
    add_field => { "service_name" => "collections-spring" }
  }

  # Parse Java stack traces
  if [message] =~ /(?m)^(\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}.\d{3})\s+(\[.*?\])?\s*(TRACE|DEBUG|INFO|WARN|ERROR|FATAL)\s+(\[.*?\])?\s*(.*)/ {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+(?:\[%{DATA:thread}\])?\s*%{LOGLEVEL:level}\s+(?:\[%{DATA:logger}\])?\s*%{GREEDYDATA:log_message}" }
    }
    
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
    }
  }

  # Parse Spring Boot logs
  if [fields][service] == "spring-boot" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:level}\s+%{NUMBER:pid}\s+---\s+\[\s*%{DATA:thread}\]\s+%{NOTSPACE:logger}\s*:\s+%{GREEDYDATA:log_message}" }
    }
  }

  # Override service name from tags or fields if present
  if [fields][service] {
    mutate {
      update => { "service_name" => "%{[fields][service]}" }
    }
  }

  # Extract trace and span IDs if present
  if [message] =~ /traceId=([a-f0-9]+)/ {
    grok {
      match => { "message" => "traceId=(?<trace_id>[a-f0-9]+)" }
    }
  }

  if [message] =~ /spanId=([a-f0-9]+)/ {
    grok {
      match => { "message" => "spanId=(?<span_id>[a-f0-9]+)" }
    }
  }

  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }

  # Add environment information
  mutate {
    add_field => { "environment" => "development" }
    add_field => { "log_source" => "logstash" }
  }

  # Remove empty fields
  if [message] == "" {
    drop { }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logs-collections-spring-%{+YYYY.MM.dd}"
  }

  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}
